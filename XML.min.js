// refer: https://github.com/Peng-YM/QuanX/blob/master/Tools/XMLParser/xml-parser.js
// refer: https://goessner.net/download/prj/jsonxml/
// minify: https://www.digitalocean.com/community/tools/minify
export class XMLs{#ATTRIBUTE_KEY="@";#CHILD_NODE_KEY="#";#UNESCAPE={"&amp;":"&","&lt;":"<","&gt;":">","&apos;":"'","&quot;":'"'};#ESCAPE={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&apos;",'"':"&quot;"};constructor(opts){this.name="XML v0.4.0-2",this.opts=opts,BigInt.prototype.toJSON=()=>this.toString()}parse(xml=new String,reviver=""){const UNESCAPE=this.#UNESCAPE,ATTRIBUTE_KEY=this.#ATTRIBUTE_KEY,CHILD_NODE_KEY=this.#CHILD_NODE_KEY;let json=function fromXML(elem,reviver){let object;switch(typeof elem){case"string":case"undefined":object=elem;break;case"object":const raw=elem.raw,name=elem.name,tag=elem.tag,children=elem.children;object=raw||(tag?function(tag,reviver){if(!tag)return;const list=tag.split(/([^\s='"]+(?:\s*=\s*(?:'[\S\s]*?'|"[\S\s]*?"|[^\s'"]*))?)/),length=list.length;let attributes,val;for(let i=0;i<length;i++){let str=removeSpaces(list[i]);if(!str)continue;attributes||(attributes={});const pos=str.indexOf("=");if(pos<0)str=ATTRIBUTE_KEY+str,val=null;else{val=str.substr(pos+1).replace(/^\s+/,""),str=ATTRIBUTE_KEY+str.substr(0,pos).replace(/\s+$/,"");const firstChar=val[0];firstChar!==val[val.length-1]||"'"!==firstChar&&'"'!==firstChar||(val=val.substr(1,val.length-2)),val=unescapeXML(val)}reviver&&(val=reviver(str,val)),addObject(attributes,str,val)}return attributes;function removeSpaces(str){return str?.trim?.()}}(tag,reviver):children?{}:{[name]:void 0}),"plist"===name?object=Object.assign(object,fromPlist(children[0],reviver)):children?.forEach?.(((child,i)=>{"string"==typeof child?addObject(object,CHILD_NODE_KEY,fromXML(child,reviver),void 0):child.tag||child.children||child.raw?addObject(object,child.name,fromXML(child,reviver),void 0):addObject(object,child.name,fromXML(child,reviver),children?.[i-1]?.name)})),children&&0===children.length&&addObject(object,CHILD_NODE_KEY,null,void 0),reviver&&(object=reviver(name||"",object))}return object;function addObject(object,key,val,prevKey=key){if(void 0!==val){const prev=object[prevKey];Array.isArray(prev)?prev.push(val):prev?object[prevKey]=[prev,val]:object[key]=val}}}(function(text){const list=text.replace(/^[ \t]+/gm,"").split(/<([^!<>?](?:'[\S\s]*?'|"[\S\s]*?"|[^'"<>])*|!(?:--[\S\s]*?--|\[[^\[\]'"<>]+\[[\S\s]*?]]|DOCTYPE[^\[<>]*?\[[\S\s]*?]|(?:ENTITY[^"<>]*?"[\S\s]*?")?[\S\s]*?)|\?[\S\s]*?\?)>/),length=list.length,root={children:[]};let elem=root;const stack=[];for(let i=0;i<length;){const str=list[i++];str&&appendText(str);const tag=list[i++];tag&&parseNode(tag)}return root;function parseNode(tag){const tags=tag.split(" "),name=tags.shift(),length=tags.length;let child={};switch(name[0]){case"/":const closed=tag.replace(/^\/|[\s\/].*$/g,"").toLowerCase();for(;stack.length;){const tagName=elem?.name?.toLowerCase?.();if(elem=stack.pop(),tagName===closed)break}break;case"?":child.name=name,child.raw=tags.join(" "),appendChild(child);break;case"!":/!\[CDATA\[(.+)\]\]/.test(tag)?(child.name="!CDATA",child.raw=tag.match(/!\[CDATA\[(.+)\]\]/)):(child.name=name,child.raw=tags.join(" ")),appendChild(child);break;default:if(child=function(tag){const elem={children:[]};tag=tag.replace(/\s*\/?$/,"");const pos=tag.search(/[\s='"\/]/);pos<0?elem.name=tag:(elem.name=tag.substr(0,pos),elem.tag=tag.substr(pos));return elem}(tag),appendChild(child),"/"===(tags?.[length-1]??name).slice(-1))delete child.children;else if("link"===name)delete child.children;else stack.push(elem),elem=child}}function appendText(str){(str=function(str){return str?.replace?.(/^(\r\n|\r|\n|\t)+|(\r\n|\r|\n|\t)+$/g,"")}(str))&&appendChild(unescapeXML(str))}function appendChild(child){elem.children.push(child)}}(xml),reviver);return json;function fromPlist(elem,reviver){let object;switch(typeof elem){case"string":case"undefined":object=elem;break;case"object":const name=elem.name,children=elem.children;switch(object={},name){case"plist":let plist=fromPlist(children[0],reviver);object=Object.assign(object,plist);break;case"dict":let dict=children.map((child=>fromPlist(child,reviver)));dict=function(source,length){var index=0,target=[];for(;index<source.length;)target.push(source.slice(index,index+=length));return target}(dict,2),object=Object.fromEntries(dict);break;case"array":Array.isArray(object)||(object=[]),object=children.map((child=>fromPlist(child,reviver)));break;case"key":object=children[0];break;case"true":case"false":const boolean=name;object=JSON.parse(boolean);break;case"integer":const integer=children[0];object=BigInt(integer);break;case"real":const real=children[0];object=parseFloat(real);break;case"string":object=children[0]}reviver&&(object=reviver(name||"",object))}return object}function unescapeXML(str){return str.replace(/(&(?:lt|gt|amp|apos|quot|#(?:\d{1,6}|x[0-9a-fA-F]{1,5}));)/g,(function(str){if("#"===str[1]){const code="x"===str[2]?parseInt(str.substr(3),16):parseInt(str.substr(2),10);if(code>-1)return String.fromCharCode(code)}return UNESCAPE[str]||str}))}}stringify(json=new Object,tab=""){this.#ESCAPE;const ATTRIBUTE_KEY=this.#ATTRIBUTE_KEY,CHILD_NODE_KEY=this.#CHILD_NODE_KEY;let XML="";for(let elem in json)XML+=toXml(json[elem],elem,"");return XML=tab?XML.replace(/\t/g,tab):XML.replace(/\t|\n/g,""),XML;function toXml(Elem,Name,Ind){let xml="";switch(typeof Elem){case"object":if(Array.isArray(Elem))xml=Elem.reduce(((prevXML,currXML)=>prevXML+`${Ind}${toXml(currXML,Name,`${Ind}\t`)}\n`),"");else{let attribute="",hasChild=!1;for(let name in Elem)name[0]===ATTRIBUTE_KEY?(attribute+=` ${name.substring(1)}="${Elem[name].toString()}"`,delete Elem[name]):void 0===Elem[name]?Name=name:hasChild=!0;if(xml+=`${Ind}<${Name}${attribute}${hasChild||"link"===Name?"":"/"}>`,hasChild){if("plist"===Name)xml+=toPlist(Elem,Name,`${Ind}\t`);else for(let name in Elem)if(name===CHILD_NODE_KEY)xml+=Elem[name]??"";else xml+=toXml(Elem[name],name,`${Ind}\t`);xml+=("\n"===xml.slice(-1)?Ind:"")+`</${Name}>`}}break;case"string":switch(Name){case"?xml":xml+=`${Ind}<${Name} ${Elem.toString()}>`;break;case"?":xml+=`${Ind}<${Name}${Elem.toString()}${Name}>`;break;case"!":xml+=`${Ind}\x3c!--${Elem.toString()}--\x3e`;break;case"!DOCTYPE":xml+=`${Ind}<${Name} ${Elem.toString()}>`;break;case"!CDATA":xml+=`${Ind}<![CDATA[${Elem.toString()}]]>`;break;case CHILD_NODE_KEY:xml+=Elem;break;default:xml+=`${Ind}<${Name}>${Elem.toString()}</${Name}>`}break;case"undefined":xml+=Ind+`<${Name.toString()}/>`}return xml}function toPlist(Elem,Name,Ind){let plist="";switch(typeof Elem){case"boolean":plist=`${Ind}<${Elem.toString()}/>`;break;case"number":plist=`${Ind}<real>${Elem.toString()}</real>`;break;case"bigint":plist=`${Ind}<integer>${Elem.toString()}</integer>`;break;case"string":plist=`${Ind}<string>${Elem.toString()}</string>`;break;case"object":let array="";if(Array.isArray(Elem)){for(var i=0,n=Elem.length;i<n;i++)array+=`${Ind}${toPlist(Elem[i],Name,`${Ind}\t`)}`;plist=`${Ind}<array>${array}${Ind}</array>`}else{let dict="";Object.entries(Elem).forEach((([key,value])=>{dict+=`${Ind}<key>${key}</key>`,dict+=toPlist(value,key,Ind)})),plist=`${Ind}<dict>${dict}${Ind}</dict>`}}return plist}}}
