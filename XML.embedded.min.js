// refer: https://github.com/Peng-YM/QuanX/blob/master/Tools/XMLParser/xml-parser.js
// refer: https://goessner.net/download/prj/jsonxml/json2xml.js
// minify: https://www.digitalocean.com/community/tools/minify
function XMLs(opts){return new class{#ATTRIBUTE_KEY="@";#CHILD_NODE_KEY="#";#UNESCAPE={"&amp;":"&","&lt;":"<","&gt;":">","&apos;":"'","&quot;":'"'};#ESCAPE={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&apos;",'"':"&quot;"};constructor(opts){this.name="XML v0.2.5",this.opts=opts}parse(xml=new String,reviver=""){const UNESCAPE=this.#UNESCAPE,ATTRIBUTE_KEY=this.#ATTRIBUTE_KEY,CHILD_NODE_KEY=this.#CHILD_NODE_KEY;let json=function toObject(elem,reviver){let object;switch(typeof elem){case"string":case"undefined":object=elem;break;case"object":const raw=elem.raw,tag=elem.tag,children=elem.children;object=raw||(tag?function(tag,reviver){if(!tag)return;const list=tag.split(/([^\s='"]+(?:\s*=\s*(?:'[\S\s]*?'|"[\S\s]*?"|[^\s'"]*))?)/),length=list.length;let attributes,val;for(let i=0;i<length;i++){let str=removeSpaces(list[i]);if(!str)continue;attributes||(attributes={});const pos=str.indexOf("=");if(pos<0)str=ATTRIBUTE_KEY+str,val=null;else{val=str.substr(pos+1).replace(/^\s+/,""),str=ATTRIBUTE_KEY+str.substr(0,pos).replace(/\s+$/,"");const firstChar=val[0];firstChar!==val[val.length-1]||"'"!==firstChar&&'"'!==firstChar||(val=val.substr(1,val.length-2)),val=unescapeXML(val)}reviver&&(val=reviver(str,val)),addObject(attributes,str,val)}return attributes}(tag,reviver):children?{}:{[elem.name]:void 0}),children&&children.forEach(((child,i)=>{"string"==typeof child?addObject(object,CHILD_NODE_KEY,toObject(child,reviver),void 0):child.tag||child.children?addObject(object,child.name,toObject(child,reviver),void 0):addObject(object,child.name,toObject(child,reviver),children?.[i-1]?.name)})),reviver&&(object=reviver(elem.name||"",object))}return object;function addObject(object,key,val,prevKey=key){if(void 0!==val){const prev=object[prevKey];Array.isArray(prev)?prev.push(val):prev?object[prevKey]=[prev,val]:object[key]=val}}}(function(text){const list=text.split(/<([^!<>?](?:'[\S\s]*?'|"[\S\s]*?"|[^'"<>])*|!(?:--[\S\s]*?--|\[[^\[\]'"<>]+\[[\S\s]*?]]|DOCTYPE[^\[<>]*?\[[\S\s]*?]|(?:ENTITY[^"<>]*?"[\S\s]*?")?[\S\s]*?)|\?[\S\s]*?\?)>/),length=list.length,root={children:[]};let elem=root;const stack=[];for(let i=0;i<length;){const str=list[i++];str&&appendText(str);const tag=list[i++];tag&&parseNode(tag)}return root;function parseNode(tag){const tagLength=tag.length;let child={};switch(tag[0]){case"/":const closed=tag.replace(/^\/|[\s\/].*$/g,"").toLowerCase();for(;stack.length;){const tagName=elem?.name?.toLowerCase?.();if(elem=stack.pop(),tagName===closed)break}break;case"?":child.name="?",child.raw=tag.substr(1,tagLength-2),appendChild(child);break;case"!":"[CDATA["===tag.substr(1,7)&&"]]"===tag.substr(-2)?appendText(tag.substr(8,tagLength-10)):(child.name="!",child.raw=tag.substr(1),appendChild(child));break;default:if(child=function(tag){const elem={children:[]};tag=tag.replace(/\s*\/?$/,"");const pos=tag.search(/[\s='"\/]/);pos<0?elem.name=tag:(elem.name=tag.substr(0,pos),elem.tag=tag.substr(pos));return elem}(tag),appendChild(child),"/"===tag[tagLength-1])delete child.children;else stack.push(elem),elem=child}}function appendChild(child){elem.children.push(child)}function appendText(str){(str=function(str){return str?.replace?.(/^(\r\n|\r|\n|\t)+|(\r\n|\r|\n|\t)+$/g,"")}(str))&&appendChild(unescapeXML(str))}}(xml),reviver);return json;function removeSpaces(str){return str?.trim?.()}function unescapeXML(str){return str.replace(/(&(?:lt|gt|amp|apos|quot|#(?:\d{1,6}|x[0-9a-fA-F]{1,5}));)/g,(function(str){if("#"===str[1]){const code="x"===str[2]?parseInt(str.substr(3),16):parseInt(str.substr(2),10);if(code>-1)return String.fromCharCode(code)}return UNESCAPE[str]||str}))}}stringify(json=new Object,tab=""){this.#ESCAPE;const ATTRIBUTE_KEY=this.#ATTRIBUTE_KEY,CHILD_NODE_KEY=this.#CHILD_NODE_KEY;let XML="";for(let elem in json)XML+=toXml(json[elem],elem,"");return XML=tab?XML.replace(/\t/g,tab):XML.replace(/\t|\n/g,""),XML;function toXml(Elem,Name,Ind){let xml="";if(Array.isArray(Elem))xml=Elem.reduce(((prevXML,currXML)=>prevXML+(Ind+toXml(currXML,Name,Ind+"\t")+"\n")),"");else if("object"==typeof Elem){let attribute="",hasChild=!1;for(let name in Elem)name.charAt(0)===ATTRIBUTE_KEY?attribute+=` ${name.substring(1)}="${Elem[name].toString()}"`:void 0===Elem[name]?Name=name:hasChild=!0;if(xml+=`${Ind}<${Name}${attribute}${hasChild?"":"/"}>`,hasChild){for(let name in Elem)name==CHILD_NODE_KEY?xml+=Elem[name]:"#cdata"==name?xml+=`<![CDATA[${Elem[name]}]]>`:"@"!=name.charAt(0)&&(xml+=toXml(Elem[name],name,Ind+"\t"));xml+=("\n"==xml.charAt(xml.length-1)?Ind:"")+`</${Name}>`}}else"string"==typeof Elem?xml+="?"===Name?Ind+`<${Name}${Elem.toString()}${Name}>`:"!"===Name?Ind+`\x3c!--${Elem.toString()}--\x3e`:Ind+`<${Name}>${Elem.toString()}</${Name}>`:void 0===Elem&&(xml+=Ind+`<${Name.toString()}/>`);return xml}}}(opts)}
